const PURCHASE_ORDER_MODEL = require("../model/purchaseOrderModel");
const PURCHASE_ITEMS_MODEL = require("../model/purchaseItemModel");
const DISBURSEMENT_MODEL = require("../model/disbursementModel");
const ERROR_RESPONSE = require("../utils/catchErrorResponse");
const { v4: uuidv4 } = require("uuid");
const VARIANT_MODEL = require("../model/variantModel");
const PRODUCT_MODEL = require("../model/ProductModel");
const VENDOR_MODEL = require("../model/vendorModel");
const { createVendorActivity } = require("../utils/createActivity");

module.exports.createPurchaseOrder = async (req, res) => {
  try {
    const {
      vendorId,
      purchaseItemDetails, // purchaseItemDetails will come in array as per purchase Item Model except vendorId and subTotal
      transactionId,
      status,
      shipToAddress,
      paymentTerms,
      shipVia,
      deliveryDate,
      dropShipInfo,
      employee,
      depositeAmount,
      shippingCharges,
      discountAmount,
      soRefrence,
      memo,
      user
    } = req.body;

    let pieces = 0;
    let totalAmount = 0;

    const orderItems = await Promise.all(
      purchaseItemDetails?.map(async (elem) => {
        await VARIANT_MODEL.findByIdAndUpdate(elem.variantId, {
          $inc: { upcomingQuantity: +Number(elem.quantity) }
        });

        await PRODUCT_MODEL.findByIdAndUpdate(elem.productId, {
          $inc: { upcomingQuantity: +Number(elem.quantity) }
        });

        const subTotal = elem.quantity * elem.price;
        pieces += elem.quantity;
        totalAmount += subTotal;

        return {
          vendorId,
          productId: elem.productId,
          variantId: elem.variantId,
          itemCode: elem.itemCode,
          description: elem.description,
          purchaseWeight: elem.purchaseWeight,
          orderedQuantity: elem.quantity,
          pricePerUnit: elem.price,
          subTotal
        };
      })
    );

    totalAmount = totalAmount - discountAmount;
    const createdOrderItems = await PURCHASE_ITEMS_MODEL.insertMany(orderItems);
    const purchaseItemIds = createdOrderItems.map((item) => item._id);

    const balanceAmount = totalAmount - depositeAmount;
    const PoNumber = uuidv4().substring(0, 6);

    const purchaseOrder = new PURCHASE_ORDER_MODEL({
      vendorId,
      purchaseItemId: purchaseItemIds,
      transactionId,
      PoNumber,
      status,
      transactionDate: new Date(),
      shipToAddress,
      paymentTerms,
      shipVia,
      deliveryDate,
      dropShipInfo,
      pieces,
      employee,
      totalAmount,
      depositeAmount,
      balanceAmount,
      shippingCharges,
      grandTotalAmount: shippingCharges + totalAmount,
      discountAmount,
      soRefrence,
      memo
    });

    const purchasePromise = purchaseOrder.save();
    const vendorPromise = VENDOR_MODEL.findByIdAndUpdate(vendorId, {
      $inc: { balanceAmount: +Number(balanceAmount) }
    });

    await Promise.all([purchasePromise, vendorPromise]);

    //create disburshed
    const disbursement = DISBURSEMENT_MODEL.create({
      vendorId,
      purchaseItemId: purchaseItemIds,
      purchaseOrderId: purchaseOrder._id,
      transactionId,
      transactionDate: purchaseOrder.transactionDate,
      employee,
      totalAmount,
      amountPaid: depositeAmount,
      totalDisburded: depositeAmount,
      paymentMemo: memo
    });

    purchaseOrder.disbursementId = disbursement._id;

    await purchaseOrder.save();

    const body = {
      vendorId,
      adminId: user.id,
      subject: "Created Purchase order",
      body: `Purchase order generated by admin : ${
        user?.userName
      } having purchase order no. ${PoNumber} and total amount : ${totalAmount} among amound paid : ${depositeAmount} and balance amount is : ${
        totalAmount - depositeAmount
      }.`
    };

    const vendorActivity = await createVendorActivity(body, res);

    if (!vendorActivity) {
      return res.status(400).json({
        status: false,
        message: "Error in create activity"
      });
    }

    res.status(200).json({
      status: true,
      message: "Purchase Order Created"
    });
  } catch (error) {
    return ERROR_RESPONSE(res, error);
  }
};

module.exports.createMultiplePO = async (req, res) => {
  try {
    const { vendorId, poArr } = req.body;

    for (elem of poArr) {
      const {
        purchaseItemDetails, // purchaseItemDetails will come in array as per purchase Item Model except vendorId and subTotal
        transactionId,
        status,
        shipToAddress,
        paymentTerms,
        shipVia,
        deliveryDate,
        dropShipInfo,
        employee,
        depositeAmount,
        discountAmount,
        soRefrence,
        memo
      } = elem;

      let pieces = 0;
      let totalAmount = 0;

      const orderItems = await Promise.all(
        purchaseItemDetails?.map(async (elem) => {
          await VARIANT_MODEL.findByIdAndUpdate(elem.variantId, {
            $inc: { upcomingQuantity: +Number(elem.quantity) }
          });

          await PRODUCT_MODEL.findByIdAndUpdate(elem.productId, {
            $inc: { upcomingQuantity: +Number(elem.quantity) }
          });

          const subTotal = elem.quantity * elem.price;
          pieces += elem.quantity;
          totalAmount += subTotal;

          return {
            vendorId,
            productId: elem.productId,
            variantId: elem.variantId,
            itemCode: elem.itemCode,
            description: elem.description,
            purchaseWeight: elem.purchaseWeight,
            orderedQuantity: elem.quantity,
            pricePerUnit: elem.price,
            subTotal
          };
        })
      );

      totalAmount = totalAmount - discountAmount;
      const createdOrderItems = await PURCHASE_ITEMS_MODEL.insertMany(
        orderItems
      );
      const purchaseItemIds = createdOrderItems.map((item) => item._id);

      const balanceAmount = totalAmount - depositeAmount;
      const PoNumber = uuidv4().substring(0, 6);

      const purchaseOrder = new PURCHASE_ORDER_MODEL({
        vendorId,
        purchaseItemId: purchaseItemIds,
        transactionId,
        PoNumber,
        status,
        transactionDate: new Date(),
        shipToAddress,
        paymentTerms,
        shipVia,
        deliveryDate,
        dropShipInfo,
        pieces,
        employee,
        totalAmount,
        depositeAmount,
        balanceAmount,
        discountAmount,
        soRefrence,
        memo
      });

      await purchaseOrder.save();

      //create disburshed
      const disbursement = DISBURSEMENT_MODEL.create({
        vendorId,
        purchaseItemId: purchaseItemIds,
        purchaseOrderId: purchaseOrder._id,
        transactionId,
        transactionDate: purchaseOrder.transactionDate,
        employee,
        totalAmount,
        amountPaid: depositeAmount,
        totalDisburded: depositeAmount,
        paymentMemo: memo
      });

      purchaseOrder.disbursementId = disbursement._id;

      await purchaseOrder.save();
    }

    res.status(200).json({
      status: true,
      message: "Purchase Order Created"
    });
  } catch (error) {
    return ERROR_RESPONSE(res, error);
  }
};

module.exports.viewPurchaseOrderOfOneVendor = async (req, res) => {
  try {
    const query = req.query || {};
    //to get all PO data for 1 individual vendor pass vendorId in query(?vendorId=9652fe5625e45) or if want filter by any other fields so can pass in query.

    const purchaseOrder = await PURCHASE_ORDER_MODEL.find(
      query,
      "-purchaseItemId"
    );

    res.status(200).json({
      status: true,
      data: purchaseOrder
    });
  } catch (error) {
    return ERROR_RESPONSE(res, error);
  }
};

module.exports.onePurchaseOrderDetails = async (req, res) => {
  try {
    const { poId } = req.params; // Send purchase order _id

    // Retrieve purchase order details and populate the vendorId and variantId fields
    const purchaseOrderDetails = await PURCHASE_ORDER_MODEL.findById(poId)
      .populate("vendorId")
      .populate({
        path: "purchaseItemId",
        populate: {
          path: "variantId"
        }
      });

    if (!purchaseOrderDetails) {
      return res.status(404).json({
        status: false,
        message: "Purchase order not found"
      });
    }

    res.status(200).json({
      status: true,
      data: purchaseOrderDetails
    });
  } catch (error) {
    return ERROR_RESPONSE(res, error);
  }
};

// extras
module.exports.addBalance = async (req, res) => {
  try {
    const vendors = await VENDOR_MODEL.find();

    const updatePromises = vendors.map(async (vendor) => {
      const allPo = await PURCHASE_ORDER_MODEL.find({ vendorId: vendor._id });

      const balance = allPo.reduce((acc, elem) => acc + elem.balanceAmount, 0);

      await VENDOR_MODEL.findByIdAndUpdate(vendor._id, {
        $set: { balanceAmount: balance }
      });
    });

    await Promise.all(updatePromises);

    // Respond with success
    res.send("updated balance amt");
  } catch (error) {
    return ERROR_RESPONSE(res, error);
  }
};

module.exports.deletePurchaseOrder = async (req, res) => {
  try {
    const { poId } = req.params;
    const { user } = req.body;

    const deletedPo = await PURCHASE_ORDER_MODEL.findByIdAndDelete(poId);

    if (!deletedPo) {
      res.status(400).json({
        status: false,
        message: "Error in delete purchase order"
      });
    }

    const body = {
      vendorId: deletedPo.vendorId,
      adminId: user.id,
      subject: "Deleted Purchase order",
      body: `Purchase order deleted by admin : ${user?.userName} having purchase order no. ${deletedPo?.PoNumber}, total ordered quantity ${deletedPo?.pieces} pieces and total amount : ${deletedPo?.totalAmount}.`
    };

    const vendorActivity = await createVendorActivity(body, res);

    if (!vendorActivity) {
      return res.status(400).json({
        status: false,
        message: "Error in create activity",
        data: deletedPo
      });
    }

    console.log({ deletedPo });

    res.status(200).json({
      status: true,
      message: "Purchse order deleted successfully"
    });
  } catch (error) {
    return ERROR_RESPONSE(res, error);
  }
};
